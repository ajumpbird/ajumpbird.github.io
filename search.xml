<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PyTorch数据转换Transforms</title>
    <url>/2024/07/10/PyTorch%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2Transforms/</url>
    <content><![CDATA[<p>为了更有效地训练模型，往往需要对输入数据进行一些转换，这就需要用到<code>torchvision.transforms</code>。
<span id="more"></span> 本文参考<span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLm9yZy90dXRvcmlhbHMvYmVnaW5uZXIvYmFzaWNzL3RyYW5zZm9ybXNfdHV0b3JpYWwuaHRtbA==">Transforms<i class="fa fa-external-link-alt"></i></span></p>
<p>本教程用到库如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor, Lambda</span><br></pre></td></tr></table></figure>
<p>所有的TorchVision
datasets都用两个参数：<code>transform</code>和<code>target_transform</code>分别用于修改样本和标签，<code>torchvision.transforms</code>提供了几个开箱即用的transforms。</p>
<p>FashionMNIST的图像是PIL
Image，标签是整数，我们需要将图像转换为标准化的tensor，将标签转换为one-hot形式的tensor，为了进行这些转换，我们用到<code>ToTensor</code>和<code>Lambda</code>。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ds = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># ToTensor 将 PIL image 或 NumPy ndarray 转换为 FloatTensor</span></span><br><span class="line">    <span class="comment"># 并将像素值转换到 [0,1]</span></span><br><span class="line">    transform=ToTensor(),</span><br><span class="line">    <span class="comment"># 使用 scatter_ 将指定位置的值设为 1</span></span><br><span class="line">    target_transform=Lambda(<span class="keyword">lambda</span> y: torch.zeros(<span class="number">10</span>, dtype=torch.<span class="built_in">float</span>).scatter_(<span class="number">0</span>, torch.tensor(y), value=<span class="number">1</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyTorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python魔术方法</title>
    <url>/2024/07/10/Python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Python
类中有许多特殊方法（也称为魔术方法或双下划线方法），它们以双下划线开头和结尾，并为类定义了特殊的行为。
<span id="more"></span> 以下是一些常见的特殊方法及其用途：</p>
<div class="note warning"><p>本文由ChatGPT生成!</p>
</div>
<h3 id="初始化和表示">初始化和表示</h3>
<ul>
<li><code>__init__(self, ...)</code>：初始化方法，在创建对象时调用，用于设置对象的初始状态。</li>
<li><code>__new__(cls, ...)</code>：在创建对象时调用，返回该对象的一个实例。通常不需要重载。</li>
<li><code>__del__(self)</code>：析构方法，在对象销毁时调用。很少用。</li>
</ul>
<h3 id="字符串表示">字符串表示</h3>
<ul>
<li><code>__str__(self)</code>：定义当使用 <code>str()</code> 或
<code>print()</code> 输出对象时的字符串表示。</li>
<li><code>__repr__(self)</code>：定义当使用 <code>repr()</code>
或在交互解释器中直接输入对象时的字符串表示，通常应返回一个有效的 Python
表达式以重现对象。</li>
</ul>
<h3 id="容器类相关方法">容器类相关方法</h3>
<ul>
<li><code>__len__(self)</code>：返回对象的长度，通常用于容器类。</li>
<li><code>__getitem__(self, key)</code>：定义使用 <code>self[key]</code>
访问元素的行为。</li>
<li><code>__setitem__(self, key, value)</code>：定义使用
<code>self[key] = value</code> 设置元素的行为。</li>
<li><code>__delitem__(self, key)</code>：定义使用
<code>del self[key]</code> 删除元素的行为。</li>
<li><code>__iter__(self)</code>：返回一个对象的迭代器，用于迭代对象。</li>
<li><code>__next__(self)</code>：返回下一个迭代值，通常与
<code>__iter__()</code> 一起使用。</li>
</ul>
<h3 id="算术运算符">算术运算符</h3>
<ul>
<li><code>__add__(self, other)</code>：定义加法运算
(<code>+</code>)。</li>
<li><code>__sub__(self, other)</code>：定义减法运算
(<code>-</code>)。</li>
<li><code>__mul__(self, other)</code>：定义乘法运算
(<code>*</code>)。</li>
<li><code>__truediv__(self, other)</code>：定义真除法运算
(<code>/</code>)。</li>
<li><code>__floordiv__(self, other)</code>：定义地板除法运算
(<code>//</code>)。</li>
<li><code>__mod__(self, other)</code>：定义取模运算
(<code>%</code>)。</li>
<li><code>__pow__(self, other)</code>：定义幂运算
(<code>**</code>)。</li>
</ul>
<h3 id="比较运算符">比较运算符</h3>
<ul>
<li><code>__eq__(self, other)</code>：定义等于运算
(<code>==</code>)。</li>
<li><code>__ne__(self, other)</code>：定义不等于运算
(<code>!=</code>)。</li>
<li><code>__lt__(self, other)</code>：定义小于运算
(<code>&lt;</code>)。</li>
<li><code>__le__(self, other)</code>：定义小于等于运算
(<code>&lt;=</code>)。</li>
<li><code>__gt__(self, other)</code>：定义大于运算
(<code>&gt;</code>)。</li>
<li><code>__ge__(self, other)</code>：定义大于等于运算
(<code>&gt;=</code>)。</li>
</ul>
<h3 id="其他常用特殊方法">其他常用特殊方法</h3>
<ul>
<li><code>__call__(self, ...)</code>：使对象可以像函数一样被调用。</li>
<li><code>__enter__(self)</code>：定义进入上下文管理器时的行为，通常与
<code>__exit__()</code> 一起使用。</li>
<li><code>__exit__(self, exc_type, exc_value, traceback)</code>：定义退出上下文管理器时的行为，通常与
<code>__enter__()</code> 一起使用。</li>
<li><code>__getattr__(self, name)</code>：定义当试图访问一个不存在的属性时的行为。</li>
<li><code>__setattr__(self, name, value)</code>：定义设置属性的行为。</li>
<li><code>__delattr__(self, name)</code>：定义删除属性的行为。</li>
</ul>
<h3 id="示例代码">示例代码</h3>
<p>以下是一个包含多个特殊方法的类的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;MyClass with value <span class="subst">&#123;self.value&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;MyClass(<span class="subst">&#123;self.value&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">str</span>(self.value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.value)[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        val_str = <span class="built_in">list</span>(<span class="built_in">str</span>(self.value))</span><br><span class="line">        val_str[key] = value</span><br><span class="line">        self.value = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(val_str))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Called MyClass instance with value <span class="subst">&#123;self.value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, MyClass):</span><br><span class="line">            <span class="keyword">return</span> MyClass(self.value + other.value)</span><br><span class="line">        <span class="keyword">return</span> MyClass(self.value + other)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">obj = MyClass(<span class="number">12345</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(obj))  <span class="comment"># 使用 __str__</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(obj))  <span class="comment"># 使用 __repr__</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(obj))  <span class="comment"># 使用 __len__</span></span><br><span class="line"><span class="built_in">print</span>(obj[<span class="number">2</span>])  <span class="comment"># 使用 __getitem__</span></span><br><span class="line">obj[<span class="number">2</span>] = <span class="string">&#x27;9&#x27;</span>  <span class="comment"># 使用 __setitem__</span></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line">obj()  <span class="comment"># 使用 __call__</span></span><br><span class="line">new_obj = obj + MyClass(<span class="number">5</span>)  <span class="comment"># 使用 __add__</span></span><br><span class="line"><span class="built_in">print</span>(new_obj)</span><br></pre></td></tr></table></figure>
<p>在这个示例中，<code>MyClass</code>
实现了多个特殊方法，以展示如何使用这些方法来定义类的行为。</p>
]]></content>
      <categories>
        <category>ChatGPT产物</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch深度学习简单工作流</title>
    <url>/2024/07/09/PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8D%95%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[<p>本文记录学习PyTorch的过程，参考的是PyTorch的<span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLm9yZy90dXRvcmlhbHMv">官方教程<i class="fa fa-external-link-alt"></i></span>。PyTorch中有太多的类，看得人眼花缭乱，当不太了解一个类的用法时，最好的办法是问ChatGPT，并结合官方文档来看。
<span id="more"></span></p>
<h2 id="colab防止断开连接">Colab防止断开连接</h2>
<p>在浏览器控制台执行下面的代码，这个代码段的作用是定期自动点击 Google
Colab 界面上的 "连接" 按钮，以保持 Colab 会话活跃，防止会话断开。它通过
JavaScript 定期执行点击操作。</p>
<figure class="highlight javascript"><figcaption><span>Colab防断连</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ClickConnect</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Working&quot;</span>);</span><br><span class="line">  <span class="variable language_">document</span></span><br><span class="line">    .<span class="title function_">querySelector</span>(<span class="string">&quot;#top-toolbar &gt; colab-connect-button&quot;</span>)</span><br><span class="line">    .<span class="property">shadowRoot</span></span><br><span class="line">    .<span class="title function_">querySelector</span>(<span class="string">&quot;#connect&quot;</span>)</span><br><span class="line">    .<span class="title function_">click</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> intervalId = <span class="built_in">setInterval</span>(<span class="title class_">ClickConnect</span>,<span class="number">1</span>*<span class="number">60000</span>)   <span class="comment">//1 分钟点一次</span></span><br></pre></td></tr></table></figure>
<p>执行代码后如图：</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/20240712121856.png"
alt="20240712121856" />
<figcaption aria-hidden="true">20240712121856</figcaption>
</figure>
<p>红色方框中的数字，就是我们的<code>intervalId</code>，在训练神经网络的时候，执行时间比较长，需要停掉这段代码，就在浏览器控制台执行<code>clearInterval(intervalId)</code>，之后如果想再恢复定时点击功能，在控制台执行<code>intervalId = setInterval(ClickConnect,1*60000)</code>即可。</p>
<h2 id="working-with-data">Working with data</h2>
<p>这是本节需要用到的库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<p><code>torch.utils.data.DataLoader</code>和<code>torch.utils.data.Dataset</code>是对数据集操作的最基本类，Dateset用于存储样本和它们对应的标签，DataLoader将Dataset包装成可迭代对象。</p>
<p>PyTorch提供了特定领域的库，比如TorchText，TorchVision和TorchAudio，这些库包含了相应领域最常用的数据集。<code>torchvision.datasets</code>的Dateset包含了两个参数：<code>transform</code>和<code>target_transform</code>分别用于修改样本和标签，更多请参考<a href="/2024/07/10/PyTorch%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2Transforms/" title="PyTorch数据转换Transforms">PyTorch数据转换Transforms</a>。下面是下载FashionMNIST数据集：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Download training data from open datasets.</span></span><br><span class="line">training_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download test data from open datasets.</span></span><br><span class="line">test_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>以下代码说明：</p>
<ol type="1">
<li><code>training_data</code>属于<code>torchvision.datasets.mnist.FashionMNIST</code>类；</li>
<li><code>torchvision.datasets.mnist.FashionMNIST</code>又继承自<code>torch.utils.data.dataset.Dataset</code>；</li>
<li><code>torch.utils.data.dataset.Dataset</code>与<code>torch.utils.data.Dataset</code>是等价的。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看training_data属于哪个类：torchvision.datasets.mnist.FashionMNIST</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(training_data))</span><br><span class="line"><span class="comment"># 查看torchvision.datasets.mnist.FashionMNIST的继承链</span></span><br><span class="line"><span class="built_in">print</span>(datasets.mnist.FashionMNIST.mro())</span><br></pre></td></tr></table></figure>
<p>通过以下代码可以查看<code>training_data</code>的属性，可以发现：</p>
<ol type="1">
<li><code>training_data.data</code>就是样本数据；</li>
<li><code>training_data.targets</code>就是对应的标签数据。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">vars</span>(training_data))</span><br><span class="line"><span class="comment"># print(training_data.data.shape)</span></span><br><span class="line"><span class="comment"># plt.imshow(training_data.data[10], cmap=&#x27;gray&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure>
<p>以下代码将<code>training_data</code>与<code>test_data</code>包装成可迭代对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create data loaders.</span></span><br><span class="line">train_dataloader = DataLoader(training_data, batch_size=batch_size)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X是一个batch的样本，y是对应的标签</span></span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> test_dataloader:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Shape of X [N, C, H, W]: <span class="subst">&#123;X.shape&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Shape of y: <span class="subst">&#123;y.shape&#125;</span> <span class="subst">&#123;y.dtype&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])</span></span><br><span class="line"><span class="string">    Shape of y: torch.Size([64]) torch.int64</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>想了解更多请参考<a href="/2024/07/10/PyTorch%E8%87%AA%E5%AE%9A%E4%B9%89Dataset/" title="PyTorch自定义Dataset">PyTorch自定义Dataset</a>。</p>
<h2 id="creating-models">Creating Models</h2>
<p>为了用PyTorch构建神经网络，我们需要创建一个继承自<code>nn.Module</code>的类，在<code>__init__</code>方法中定义神经网络的各个层，在<code>forward</code>方法中定义数据在这些层中的传递顺序。还可以决定是否运行在GPU中。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get cpu, gpu or mps device for training.</span></span><br><span class="line">device = (</span><br><span class="line">    <span class="string">&quot;cuda&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available()</span><br><span class="line">    <span class="keyword">else</span> <span class="string">&quot;mps&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.backends.mps.is_available()</span><br><span class="line">    <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Using <span class="subst">&#123;device&#125;</span> device&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"></span><br><span class="line">model = NeuralNetwork().to(device)</span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure>
<h2 id="optimizing-the-model-parameters">Optimizing the Model
Parameters</h2>
<p>要训练定义好的模型，我们需要损失函数和优化器，如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">1e-3</span>)</span><br></pre></td></tr></table></figure>
<p>在一个epoch中，模型要做的事是：以一个batch为单位进行循环，对训练集进行预测，反向传播预测误差，调整参数。我们定义下面的训练方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">dataloader, model, loss_fn, optimizer</span>):</span><br><span class="line">    size = <span class="built_in">len</span>(dataloader.dataset)</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch, (X, y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">        X, y = X.to(device), y.to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute prediction error</span></span><br><span class="line">        pred = model(X)</span><br><span class="line">        loss = loss_fn(pred, y)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Backpropagation</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> batch % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            loss, current = loss.item(), (batch + <span class="number">1</span>) * <span class="built_in">len</span>(X)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;loss: <span class="subst">&#123;loss:&gt;7f&#125;</span>  [<span class="subst">&#123;current:&gt;5d&#125;</span>/<span class="subst">&#123;size:&gt;5d&#125;</span>]&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>得到训练好的模型后，还需要测试模型，测试和训练是有区别的，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">dataloader, model, loss_fn</span>):</span><br><span class="line">    size = <span class="built_in">len</span>(dataloader.dataset)</span><br><span class="line">    num_batches = <span class="built_in">len</span>(dataloader)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss, correct = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> dataloader:</span><br><span class="line">            X, y = X.to(device), y.to(device)</span><br><span class="line">            pred = model(X)</span><br><span class="line">            test_loss += loss_fn(pred, y).item()</span><br><span class="line">            correct += (pred.argmax(<span class="number">1</span>) == y).<span class="built_in">type</span>(torch.<span class="built_in">float</span>).<span class="built_in">sum</span>().item()</span><br><span class="line">    test_loss /= num_batches</span><br><span class="line">    correct /= size</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Test Error: \n Accuracy: <span class="subst">&#123;(<span class="number">100</span>*correct):&gt;<span class="number">0.1</span>f&#125;</span>%, Avg loss: <span class="subst">&#123;test_loss:&gt;8f&#125;</span> \n&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>通过以下代码开始训练模型，可以顺便在每个epoch测试模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">epochs = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Epoch <span class="subst">&#123;t+<span class="number">1</span>&#125;</span>\n-------------------------------&quot;</span>)</span><br><span class="line">    train(train_dataloader, model, loss_fn, optimizer)</span><br><span class="line">    test(test_dataloader, model, loss_fn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="saving-models">Saving Models</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(model.state_dict(), <span class="string">&quot;model.pth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Saved PyTorch Model State to model.pth&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="loading-models">Loading Models</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = NeuralNetwork().to(device)</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&quot;model.pth&quot;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyTorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch 图像分类</title>
    <url>/2024/07/07/PyTorch-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>本文使用PyTorch实现图像分类。 <span id="more"></span> ## 重要的链接</p>
<ol type="1">
<li><span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLm9yZy8=">PyTorch官网<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLm9yZy90dXRvcmlhbHMv">PyTorch教程<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h2 id="transforms数据转换">Transforms(数据转换)</h2>
<p>一开始，数据并不符合我们想要的格式，我们需要对数据进行一些处理，<code>TorchVision datasets</code>有两个参数：<code>transform</code>（用于修改特征）和<code>target_transform</code>（用于修改标签），<code>FashionMNIST</code>的特征是<code>PIL Image</code>格式，标签是整数。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyTorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>感悟</title>
    <url>/2024/07/09/%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<p>记录一些个人感悟。 <span id="more"></span></p>
<h2 id="section">20240728</h2>
<p>我每次都因为贪心而损失惨重，人的贪念是很难控制的，这时候只有借助外力强制执行原本定好的计划。</p>
<h2 id="section-1">20240727</h2>
<p>只有你自己能定义自己，别人不行。</p>
<h2 id="section-2">20240720</h2>
<p>学会快速从痛苦中抽离，及时止损，不必缠绵与痛苦的回忆之中，去感受当下，乐观地面对未来，痛苦的回忆像一只大蟒蛇，会缠着你不放，你要做的是远离它。</p>
<h2 id="section-3">20240718</h2>
<p>为什么人不能永远保持高效率的状态？在经历一段混乱的时间之后，下定决心改变这种不好的状态，在最初的几天，效率是很高的，但是随着时间的推进，又会回到混乱的状态。我是一个不擅长做计划的人，感觉想学的东西很多，要做的事很多，在混乱的时间里，大多数时候把时间用于刷短视频去了，因为内心感到焦虑，而刷短视频似乎会让人忘记焦虑，这真的是奶头乐。</p>
]]></content>
  </entry>
  <entry>
    <title>PyTorch自定义Dataset</title>
    <url>/2024/07/10/PyTorch%E8%87%AA%E5%AE%9A%E4%B9%89Dataset/</url>
    <content><![CDATA[<p><code>torchvision.datasets</code>可以给我们现成的数据集，为了更好地了解<code>torch.utils.data.Dataset</code>，我们创建一个自定义<code>CustomImageDataset</code>类。
<span id="more"></span> 参考<span class="exturl" data-url="aHR0cHM6Ly9weXRvcmNoLm9yZy90dXRvcmlhbHMvYmVnaW5uZXIvYmFzaWNzL2RhdGFfdHV0b3JpYWwuaHRtbA==">Datasets
&amp; DataLoaders<i class="fa fa-external-link-alt"></i></span>。</p>
<p>本教程需要用到以下库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> torchvision.io <span class="keyword">import</span> read_image</span><br></pre></td></tr></table></figure>
<h2 id="自定义-customimagedataset-类">自定义 CustomImageDataset 类</h2>
<p><code>CustomImageDataset</code>需要继承<code>torch.utils.data.Dataset</code>，并且实现三个方法：<code>__init__</code>，<code>__len__</code>和<code>__getitem__</code>：</p>
<ol type="1">
<li><code>__init__</code>：初始化数据集，接收图像路径和标签列表；</li>
<li><code>__len__</code>：是Python的特殊方法之一，它用于返回对象的长度。通常在自定义容器类或数据集类中定义，以便使用内置的<code>len()</code>函数获取对象的长度；</li>
<li><code>__getitem__</code>：根据给定的索引返回一个图像和对应的标签。</li>
</ol>
<div class="note success"><p>Python
类中有许多特殊方法（也称为魔术方法或双下划线方法），它们以双下划线开头和结尾，并为类定义了特殊的行为。更多请参考<a href="/2024/07/10/Python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/" title="Python魔术方法">Python魔术方法</a>。</p>
</div>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomImageDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    annotations_file 文件类似如下</span></span><br><span class="line"><span class="string">    tshirt1.jpg, 0</span></span><br><span class="line"><span class="string">    tshirt2.jpg, 0</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">    ankleboot999.jpg, 9</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, annotations_file, img_dir, transform=<span class="literal">None</span>, target_transform=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 是一个元组数组</span></span><br><span class="line">        self.img_labels = pd.read_csv(annotations_file)</span><br><span class="line">        <span class="comment"># 图片所在文件夹</span></span><br><span class="line">        self.img_dir = img_dir</span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.target_transform = target_transform</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_labels)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="comment"># self.img_labels.iloc[idx, 0] 是图片的文件名</span></span><br><span class="line">        <span class="comment"># iloc 是 pandas 提供的用于按照索引位置访问数据的方法</span></span><br><span class="line">        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, <span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 用于将图像转换为 tensor</span></span><br><span class="line">        image = read_image(img_path)</span><br><span class="line">        <span class="comment"># 图像对应的标签</span></span><br><span class="line">        label = self.img_labels.iloc[idx, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.transform:</span><br><span class="line">            image = self.transform(image)</span><br><span class="line">        <span class="keyword">if</span> self.target_transform:</span><br><span class="line">            label = self.target_transform(label)</span><br><span class="line">        <span class="keyword">return</span> image, label</span><br></pre></td></tr></table></figure>
<h2 id="通过-dataloader-提取数据">通过 DataLoader 提取数据</h2>
<p><code>Dataset</code>每次可以提取数据集中的一张图片和标签，然而在训练模型的时候，我们想每次以‘minibatches’的方式提取数据，在每个epoch打乱数据以缓减过拟合，用Python的多线程来加速……，<code>DataLoader</code>将这些过程抽象化为一个可迭代类，提供给我们可用的API。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_dataloader = DataLoader(training_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display image and label.</span></span><br><span class="line"><span class="comment"># 每次提取一个 batch_size 的数据</span></span><br><span class="line">train_features, train_labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(train_dataloader))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Feature batch shape: <span class="subst">&#123;train_features.size()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Labels batch shape: <span class="subst">&#123;train_labels.size()&#125;</span>&quot;</span>)</span><br><span class="line">img = train_features[<span class="number">0</span>].squeeze()</span><br><span class="line">label = train_labels[<span class="number">0</span>]</span><br><span class="line">plt.imshow(img, cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Label: <span class="subst">&#123;label&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印结果</span></span><br><span class="line"><span class="string">Feature batch shape: torch.Size([64, 1, 28, 28])</span></span><br><span class="line"><span class="string">Labels batch shape: torch.Size([64])</span></span><br><span class="line"><span class="string">Label: 5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyTorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客过程中遇到的问题</title>
    <url>/2024/07/07/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>第一次尝试用<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv">Hexo<i class="fa fa-external-link-alt"></i></span>搭建个人博客是2022年的暑假，那时候对前端一窍不通，在搭建的过程中遇到很多问题，然后去学了HTML+css+JavaScript，一发不可收拾，又学了nodejs和vue，对编程有了更多的了解，后来用这些知识找到了人生第一份实习，又学到了更多的知识，人生就是不断的学习、迭代！
<span id="more"></span></p>
<p>写博客是一件断断续续的事，没有形成习惯与可持续性，今天打算重新拾起，我知道我的博客可能不会有很多读者，但我对成为一个有众多读者的博主已经没有了兴趣，我只想提升自己的写作技巧，把自己学到的东西记录下来，在遗忘后方便自己查询。</p>
<p>在此记录自己在创作博客过程遇到的一些问题和解决办法。</p>
<h2 id="github搭建免费图床picgo">GitHub搭建免费图床+PicGo</h2>
<p>想要在云端的博客中显示图片，图片也需要在云端，也就是要将图片放置在图床中。图床有很多种，免费的（例如GitHub）和收费的（例如阿里云），我之前选择过阿里云图床，每年9元左右，现在我打算换成GitHub图床。
<div class="note warning"><p>注意，GitHub图床需要科学上网才能显示图片！</p>
</div></p>
<ol type="1">
<li><p>创建GitHub仓库</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/image-20240707113718256.png"
alt="创建GitHub仓库" />
<figcaption aria-hidden="true">创建GitHub仓库</figcaption>
</figure></li>
<li><p>生成token令牌：点击头像下拉菜单中的<code>Settings</code>——&gt;左侧最下方的<code>Developer settings</code></p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/image-20240707114515176.png"
alt="token" />
<figcaption aria-hidden="true">token</figcaption>
</figure></li>
<li><p>只选<code>repo</code>，然后往下拉，点击<code>Generate token</code></p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/image-20240707114917953.png"
alt="token" />
<figcaption aria-hidden="true">token</figcaption>
</figure></li>
<li><p>复制token</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/image-20240707115047198.png"
alt="copy token" />
<figcaption aria-hidden="true">copy token</figcaption>
</figure></li>
<li><p>设置PicGo</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/image-20240707115233015.png"
alt="PicGo" />
<figcaption aria-hidden="true">PicGo</figcaption>
</figure></li>
<li><p>typora设置自动上传图片</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/image-20240707115851529.png"
alt="typora" />
<figcaption aria-hidden="true">typora</figcaption>
</figure></li>
</ol>
<p>以上就是GitHub图床的搭建与配置。</p>
<h2 id="lf与crlf引发的问题">LF与CRLF引发的问题</h2>
<p>这是一个比较技术性的问题，这是Git的一个问题。我在执行命令<code>hexo g -d</code>后，控制台给我警告：
<div class="note warning"><p>LF will be replaced by CRLF the next time Git touches it</p>
</div>
网站部署后会出现混乱的情况，参照网上的解决办法，修改Git的配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用自动行尾转换</span></span><br><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>
<p>虽然控制台还是会有这个警告，但是网站能够正常部署。</p>
<h2 id="本地搜索功能异常">本地搜索功能异常</h2>
<p>我无法复现这个问题，这个问题是这样的，在本地部署没有问题，但是部署到云端后，在谷歌浏览器中，本地搜索功能出现异常，无法使用，并且不能像本地那样正常显示，在Edge浏览中是正常的。解决方案是将<code>minify</code>设置为<code>false</code>。</p>
<h2 id="hexo常用命令">Hexo常用命令</h2>
<ol type="1">
<li><code>hexo server</code>启动服务器，如果只修改文章，刷新浏览器就可以看见变动，如果改了配置文件，则需要重启</li>
<li><code>hexo g -d</code>部署到云端</li>
</ol>
<h2
id="picgo无法自动上传图片到github">PicGo无法自动上传图片到GitHub</h2>
<p>今天PicGo突然无法自动上传图片到GitHub，日志中出现以下错误：</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/image-20240708211540976.png"
alt="image-20240708211540976" />
<figcaption aria-hidden="true">image-20240708211540976</figcaption>
</figure>
<p>于是我重新生成了token，更新了PicGo的token栏，就回复正常了。</p>
<h2 id="next中的一些功能">next中的一些功能</h2>
<p>我选用的hexo主题是<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy8=">next<i class="fa fa-external-link-alt"></i></span>，这个第三方主题有详细的文档，使用稳定，符合我追求极简的风格，值得推荐。以下是一些不错的功能链接：</p>
<ol type="1">
<li><p><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RhZy1wbHVnaW5zL2luZGV4Lmh0bWw/aGlnaGxpZ2h0PXF1b3Rl">Tag
Plugins<i class="fa fa-external-link-alt"></i></span></p>
<p>这个功能可以在文章中加入note、button、label等有用的小部件，使文章有更多的表现力。最让我惊讶的是它能展示pdf！实测arxiv上的pdf可以被展示。</p></li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoaXJkLXBhcnR5LXNlcnZpY2VzL3NlYXJjaC1zZXJ2aWNlcy5odG1sP2hpZ2hsaWdodD1zZWFyY2g=">Search
Services<i class="fa fa-external-link-alt"></i></span></p>
<p>本地搜索功能可以快速定位我们想要的内容。</p></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>跟着Simon学写作</title>
    <url>/2024/07/08/%E8%B7%9F%E7%9D%80Simon%E5%AD%A6%E5%86%99%E4%BD%9C/</url>
    <content><![CDATA[<p>我想通过写作来累积词汇量，这应该比单纯地记单词更有用，因为我遇见的单词都是更常用的，学以致用的效率应该是最高的。
<span id="more"></span></p>
<h2 id="ielts-writing-task-1">IELTS writing task 1</h2>
<p>这项任务是描述你看见了什么，写一份报告，不要给出观点，而是给出总结。问题包含以下6种类型：</p>
<ol type="1">
<li>Line graph</li>
<li>Bar graph</li>
<li>Pie chart</li>
<li>Table</li>
<li>Two different charts</li>
<li>Process diagram</li>
<li>Comparison diagram</li>
</ol>
<p>前面4种类型是相似的，核心是<strong>数字</strong>，应对这4种类型需要做3件事：describe、compare和changes/trends。第五种类型和前4种是相似的，只是不再有数字。第6种类型与前5种都不太相同，需要描述items和structure。</p>
<p>文章结构分为4段：</p>
<ol type="1">
<li>Introduction（解释这个问题，将试卷上的描述进行一些同义替换、改变顺序）</li>
<li>Overview（摘要、概览，对信息的一般总结，不要以“in
summary”开头）</li>
<li>Details（对数字进行比较，描述趋势）</li>
<li>Details</li>
</ol>
<p>将3、4段拆分是为了更好地组织文章结构，比如图中有一个对象的数字比较高，而另一个对象的数字比较低，可以在第3段描写高的，在第4段描写低的，这有助于在句子连贯上得分。</p>
<div class="note warning"><p>记住 no conclusion！</p>
</div>
<h3 id="line-graph">Line graph</h3>
<p>折线图中的折线往往是多条，我们的工作是比较这些折线，而不是单独描述它们，我们需要作两种类型的比较：（1）笼统的比较，比如下图中总体上蓝线位置最高，在overview段落；（2）在特定的点上比较直线，在details段落。</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-08_20-44-08.png"
alt="Line graph" />
<figcaption aria-hidden="true">Line graph</figcaption>
</figure>
<h4 id="具体实例1">具体实例1</h4>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-08_22-22-16.png"
alt="example" />
<figcaption aria-hidden="true">example</figcaption>
</figure>
<p>（1）Introduction - paraphrase the question</p>
<ul>
<li>（原文）The graph below shows electricity production(in terawatt
hours) in France between 1980 and 2012.</li>
<li>The line graph compares the amount of electricity produced in France
using four different sources of power over a period of 32 years.</li>
</ul>
<p>（2）Overview - 2 sentences，2 main points</p>
<ul>
<li>It is clear that nuclear power was by far the most important means
of electricity generation over the period shown. Renewables provided the
lowest amount of electricity in each year.</li>
</ul>
<p>（3）Paragraph 3</p>
<ul>
<li>In 1980, thermal power stations were the main source of electricity
in France, generating around 120 terawatt hours of power. Nuclear and
hydroelectric power stations produced just under 75 terawatt hours of
electricity each, and renewables provided a negligible amount. Just one
year later, nuclear power overtook thermal power as the primary source
of electricity.</li>
</ul>
<div class="note warning"><h4 id="tips1">Tips1</h4>
<p>You can't write:</p>
<ul>
<li>Nuclear was 75 terawatt hours of electricity.</li>
<li>Nuclear produced 75 terawatt hours of electricity.</li>
</ul>
<p>You must write:</p>
<ul>
<li>Nuclear power was used to produce 75 terawatt hours of
electricity.</li>
<li>Nuclear power stations produced 75 terawatt hours of
electricity.</li>
</ul>
</div>
<p>（4）Paragraph 4</p>
<ul>
<li>Between 1980 and 2005, electricity production from nuclear power
rose dramatically to a peak of 430 terawatt hours. By contrast, the
figure for thermal power fell to only 50 terawatt hours in 1985, and
remained at this level for the rest of the period. Hydroelectric power
generation remained relatively stable, at between 50 and 80 terawatt
hours, for the whole 32-year period, but renewable electricity
production saw only a small rise to approximately 25 terawatt hours by
2012.</li>
</ul>
<div class="note success"><h4 id="good-expression1">Good expression1</h4>
<ul>
<li>amount of electricity produced</li>
<li>source of/produced /generating</li>
<li>means of electricity generation</li>
<li>over a period of/over the period shown</li>
<li>by far the most important</li>
<li>a negligible amount</li>
<li>nuclear power overtook thermal power</li>
<li>as the primary source of electricity</li>
<li>rose dramatically to a peak of</li>
<li>by contrast</li>
<li>the figure for</li>
<li>remained at this level, remained stable</li>
<li>saw only a small</li>
</ul>
</div>
<h3 id="bar-graph">Bar graph</h3>
<p>Bar graph与Line graph有很多相似的地方，但是Bar
graph的横轴不总是显示时间，而只是单纯地比较数字，如下图：</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-09_11-23-54.png"
alt="example1" /></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-09_11-11-22.png"
alt="example2" /></div></div></div>
<h4 id="具体实例2">具体实例2</h4>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-09_11-18-48.png"
alt="Snipaste_2024-07-09_11-18-48" />
<figcaption aria-hidden="true">Snipaste_2024-07-09_11-18-48</figcaption>
</figure>
<p>依然采用跟Line graph相同的4段结构。</p>
<p>（1）Introduction - paraphrase the question</p>
<ul>
<li>（原文）The chart below shows global sales of the top five mobile
phone brands between 2009 and 2013.</li>
<li>The bar chart compares the number of mobile phones sold worldwide by
the five most popular manufactures in the years 2009, 2011 and
2013.</li>
</ul>
<p>（2）Overview - 2 sentences，2 main points</p>
<ul>
<li>It is clear that Nokia sold the most mobile phones between 2009 and
2011, but Samsung became the best selling brand in 2013. Samsung and
Apple saw the biggest rises in sales over the 5-year period.</li>
</ul>
<p>（3）Details - 2 paragraphs，compare the bars</p>
<ul>
<li>In 2009, Nokia sold close to 450 million mobile phones, which was
almost double the number of handsets sold by the second most successful
manufacture, Samsung. Over the following four years, however, Nokia's
sales figure fell by approximately 200 million units, whereas Samsung
saw sales rise by a similar amount. By 2013, Samsung had become the
market leader with sales reaching 450 million units.</li>
</ul>
<p>（4）Paragraph 4</p>
<ul>
<li>The other three top selling mobile phone brands between 2009 and
2013 were LG, ZTE and Apple. In 2009, these companies sold around 125
million, 50 million and 25 million mobile handsets respectively, but
Apple overtook the other two vendors in 2011. In 2013, purchases of
Apple handsets reached 150 million units, while LG saw declining sales
and the figures for ZTE rose only slightly.</li>
</ul>
<div class="note success"><h4 id="good-expression2">Good expression2</h4>
<ul>
<li>sold worldwide</li>
<li>sales figures, purchases</li>
<li>most popular, best selling brand, top selling</li>
<li>second most successful manufacture</li>
<li>market leader</li>
<li>mobile phones, handsets, units</li>
<li>brands, manufactures, companies, vendors</li>
<li>saw the biggest rises, saw declining sales</li>
<li>close to, almost, approximately, around</li>
<li>double the number</li>
<li>rise by a similar amount</li>
<li>respectively</li>
<li>overtool the other two vendors</li>
</ul>
</div>
<h3 id="pie-chart">Pie chart</h3>
<p>Pie chart可以显示数字，但通常显示百分比，如下图：</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-09_13-15-21.png"
alt="Snipaste_2024-07-09_13-15-21" />
<figcaption aria-hidden="true">Snipaste_2024-07-09_13-15-21</figcaption>
</figure>
<p>除此之外，还可以显示随时间的变化，可以谈论数量的增加或减少，如下图：</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-09_13-21-07.png"
alt="Snipaste_2024-07-09_13-21-07" />
<figcaption aria-hidden="true">Snipaste_2024-07-09_13-21-07</figcaption>
</figure>
<p>还可能在两个国家之间进行比较，如下图：</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-09_13-23-37.png"
alt="Snipaste_2024-07-09_13-23-37" />
<figcaption aria-hidden="true">Snipaste_2024-07-09_13-23-37</figcaption>
</figure>
<h4 id="具体实例3">具体实例3</h4>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-09_13-29-17.png"
alt="Snipaste_2024-07-09_13-29-17" />
<figcaption aria-hidden="true">Snipaste_2024-07-09_13-29-17</figcaption>
</figure>
<p>结构仍然是4段。</p>
<p>（1）Introduction - paraphrase the question</p>
<ul>
<li>（原文）The charts below show household spending patterns in two
countries between 1980 and 2008.</li>
<li>The pie charts compare five categories of household expenditure in
the UK and New Zealand in the years 1980 and 2008.</li>
</ul>
<p>（2）Overview - 2 sentences，2 main points</p>
<p>首先寻找非常一般的东西，两个国家具有的相似点，比如Food &amp;
drink都减少了，Utility
bills都增加了，两个国家最大的差异，比如UK的Leisure要比New
Zealand的高得多。</p>
<ul>
<li>It is noticeable that the proportion of spending on food and drink
fell in both countries over 28-year period, while spending on utility
bills rose. Also, UK residents spent a significantly larger percentage
of their household budgets on the leisure than their New Zealand
counterparts.</li>
</ul>
<p>（3）Paragraph 3</p>
<p>技巧：取第二段概述的内容进行详细展开。</p>
<ul>
<li>In 1980, 29% of an average New Zealand household budget went on food
and drink, while the equivalent figure for a UK home was 23%. By 2008,
expenditure on food and drink had fallen by 4% in New Zealand, and by a
full 10% in the UK. By contrast, both countries saw an increase in
expenditure on utility bills for the average home, from 27% to 31% in
New Zealand and from 26% to 28% in the UK.</li>
</ul>
<p>（4）Paragraph 4</p>
<ul>
<li>Leisure activities accounted for the highest proportion of UK
household spending in both years, but only the third highest proportion
in New Zealad. In fact, in 2008, New Zealanders spent only half as much
in relative terms on recreation(17%) as UK residents(34%). In both
countries, transport costs and other costs took rounghly 15% and 10% of
household budgets respectively.</li>
</ul>
<div class="note warning"><h4 id="tips3">Tips3</h4>
<ul>
<li>Don't describe each country seperately</li>
<li>Don't describe each year sperately</li>
<li>Compare countries and years together</li>
<li>Mention all 5 categories(food &amp; drink etc.)</li>
<li>Divide the categories into two groups for the two 'details'
paragraphs</li>
<li>The category called 'Other' is not important</li>
<li>Don't write "Leisure was 34%"</li>
<li>Write "Households spent 34% of their money on leisure"</li>
</ul>
</div>
<div class="note success"><h4 id="good-expression3">Good expression3</h4>
<ul>
<li>spending, expenditure, spent, costs</li>
<li>proportion of spending</li>
<li>percentage of household budget</li>
<li>the equivalent figure for a UK home</li>
<li>fell, rose, saw an increase in</li>
<li>by 2008, expenditure had fallen</li>
<li>spent a significantly larger percentage</li>
<li>than their New Zealand counterparts</li>
<li>29% of an average household budget went on</li>
<li>while, by contrast</li>
<li>leisure accounted for the highest proportion</li>
<li>spent half as much in relative terms</li>
<li>recreation</li>
</ul>
</div>
<h3 id="table">Table</h3>
<p>Table中有很多内容，我们需要做的是选择、描述和比较关键的数字，结构仍然是4段式。</p>
<h4 id="具体实例4">具体实例4</h4>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-10_20-08-40.png"
alt="Snipaste_2024-07-10_20-08-40" />
<figcaption aria-hidden="true">Snipaste_2024-07-10_20-08-40</figcaption>
</figure>
<p>（1）Introduction - paraphrase the question</p>
<ul>
<li>（原文）The table below shows statistics about the top five
countries international tourism in 2012 and 2013.</li>
<li>The table compares the five highest ranking countries in terms of
numbers of visits and the money spent by tourists over a period of two
years.</li>
</ul>
<p>（2）Overview - 2 sentences，2 main points</p>
<ul>
<li>It is clear that France was the world's most popular tourist
destination in the years 2012 and 2013. However, the USA earned by far
the most revenue from tourism over the same period.</li>
</ul>
<p>（3）Paragraph 3</p>
<ul>
<li>In 2012, 83 million tourists visited France, and the USA was the
second most visited country, with 66.7 million tourists. Spain and China
each received just under 58 million visitors, while Italy was ranked
fifth with 46.4 million tourists. 2013 saw a rise of between 1 and 4
million tourist（用作形容词） visits to each country, with the exception
of China, which received 2 million fewer visitors than in previous
year.</li>
</ul>
<p>（4）Paragraph 4</p>
<ul>
<li>Spending by tourists visiting the USA increased from $126.2 billion
in 2012 to $139.6 billion in 2013, and these fogures were well over
twice as high as those for any other country. Spain received the second
highest amounts of tourists revenue, rising from $56.3 billion to $60.4
billion, followed by France, China and Italy. Interestingly, despite
falling numbers of tourists, Chinese revenue from tourism rose by $1.7
billion in 2013.</li>
</ul>
<div class="note success"><h4 id="good-expressions4">Good expressions4</h4>
<ul>
<li>five highest ranking countries</li>
<li>the world's most popular tourist destination</li>
<li>earned by far the most</li>
<li>revenue from tourism</li>
<li>the second most visited country</li>
<li>received... visitors</li>
<li>ranked fifth</li>
<li>2013 saw a rise of</li>
<li>fewer visitors than in the previous year</li>
<li>these figures were well over twice as high as</li>
<li>amounts of tourist revenue</li>
<li>despite falling numbers</li>
<li>saw a rise increased rising from rose by</li>
</ul>
</div>
<h3 id="two-different-charts">two different charts</h3>
<p>第5种类型的问题是将两种不同的图表放在一起，你不能在它们之间进行比较，而是分别描述，如下图：</p>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-16_19-08-17.png"
alt="Snipaste_2024-07-16_19-08-17" />
<figcaption aria-hidden="true">Snipaste_2024-07-16_19-08-17</figcaption>
</figure>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-16_19-10-00.png"
alt="Snipaste_2024-07-16_19-10-00" />
<figcaption aria-hidden="true">Snipaste_2024-07-16_19-10-00</figcaption>
</figure>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-16_19-14-16.png"
alt="Snipaste_2024-07-16_19-14-16" />
<figcaption aria-hidden="true">Snipaste_2024-07-16_19-14-16</figcaption>
</figure>
<p>文章思路如下：</p>
<ol type="1">
<li><p>First, look for one main feature in <mark class="label primary">each</mark> chart(summary /
overview paragraph).</p></li>
<li><p>Second, describe specific numbers for each chart
spearately.('details' paragraph)</p></li>
</ol>
<h4 id="具体实例5">具体实例5</h4>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-16_20-45-37.png"
alt="Snipaste_2024-07-16_20-45-37" />
<figcaption aria-hidden="true">Snipaste_2024-07-16_20-45-37</figcaption>
</figure>
<p>文章还是4段：</p>
<p>（1）Introduction - paraphrase the question</p>
<ul>
<li>（原文）The bar chart below shows the numbers of men and women
attending various evening courses at an adult education centre in the
year 2009. The pie chart gives information about the ages of these
course participants.</li>
<li>The bar chart compares the numbers of males and females who took
four different evening classes in 2009, and the pie chart shows the age
profile of these attendees.</li>
</ul>
<p>（2）Overview - 2 sentences，2 main points（不给出具体数字）</p>
<ul>
<li>It is clear that significantly more women than men attended evening
classes at the education centre. We can also see that evening courses
were much more popular among older adults.</li>
</ul>
<p>（3）Paragraph 3</p>
<ul>
<li>According to the bar chart, drama, painting and language courses all
attracted more women than men to the education centre in 2009. Language
classes had the highest number of participants overall, with 40 female
and 20 male students, while painting was a popular choice among both
genders, attracting 30 female and 25 male attendees. The only course
with a higher number of males was sculpture, but this course was taken
by a mere 15 people in total.</li>
</ul>
<p>（4）Paragraph 4</p>
<ul>
<li>Looking at the age profile pie chart, we can see that the majority
of people attending evening lessons were over 40 years of age. To be
precise, 42% of them were aged 50 or more, and 26% were aged between 40
and 49. Younger adults were in the minority, with only 11% of students
aged 20 to 29, and only 5% aged under 20.</li>
</ul>
<div class="note success"><h4 id="good-expression5">Good expression5</h4>
<ul>
<li>attending courses, who took classes</li>
<li>participants, attendees, students</li>
<li>males and females</li>
<li>courses attracted more women</li>
<li>a popular choice among both genders</li>
<li>significantly more, higher, highest</li>
<li>had the highest number, with(+ number)</li>
<li>was taken by a mere 15 people</li>
<li>According to the bar chart</li>
<li>Looking at the age profile pie chart</li>
<li>the majority of peple</li>
<li>were in the minority</li>
<li>To be precise</li>
</ul>
</div>
<h3 id="process-diagram">Process diagram</h3>
<p>Describe a process is completely different from describing a graph,
bar chart, pie chart or
table.流程图与之前的5种图表都不太相似，以下是不同之处：</p>
<ol type="1">
<li>no numbers</li>
<li>can't compare anything</li>
<li>can't describe trends(increase, decrease)</li>
</ol>
<p>我们应该对流程图进行如下描述：</p>
<ol type="1">
<li>how many steps</li>
<li>where the process begins and ends</li>
<li>each step in the process</li>
</ol>
<p>Language for process description:</p>
<ol type="1">
<li>'step' language
<ul>
<li>At the first stage in the process</li>
<li>The process begins with</li>
<li>Secondly, Finally</li>
<li>The second step involves</li>
<li>Next, then, after that</li>
<li>At the following stage</li>
</ul></li>
<li>passive verbs</li>
</ol>
<p>注意：maps can also show processes</p>
<h4 id="具体实例6">具体实例6</h4>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-17_16-52-46.png"
alt="Snipaste_2024-07-17_16-52-46" />
<figcaption aria-hidden="true">Snipaste_2024-07-17_16-52-46</figcaption>
</figure>
<p>（1）Intorduction - paraphrase the question</p>
<ul>
<li>（原文）The diagrams below show how glass containers, such as
bottles, are produced and recycled.</li>
<li>Thr first flow diagram illustrates the process of glass container
production, and the second diagram shows steps in the process of
recycling used glass.</li>
</ul>
<p>（2）Overview - 2 sentences，2 main points</p>
<ul>
<li>We can see that glass is made using three main raw materials, and
that the manufacturing process consists of four distinct stages. It
requires five steps to turn used glass into new glass products.</li>
</ul>
<p>（3）Paragraph 3</p>
<ul>
<li>At the first stage in the production of glass, sand, soda ash,
limestone and other chemicals are mixed together. Next, this mixture is
heated in a glass furnace at approximately <span
class="math inline">\(1500^\circ\mathrm{C}\)</span> to produce molten
glass. The molten glass can then be shaped, by blowing, to create the
end products, namely glass containers.</li>
</ul>
<p>（4）Paragraph 4</p>
<ul>
<li>Glass recycling begins with the collection of used glass products.
The collected glass is sorted according to its colour, and then washed
in order to remove any impurities. At the fourth stage of recycling, the
glass is crushed and melted, and the resulting molten glass can finally
be moulded to create new items.</li>
</ul>
<div class="note success"><h4 id="good-expression">Good expression</h4>
<ul>
<li>steps / stages in the process of</li>
<li>consists of four distinct stages</li>
<li>raw materials, end products</li>
<li>production, manufacturing</li>
<li>turn used glass into new products</li>
<li>at the first stage, next, then, begins with</li>
<li>are mixed, is heated, can be shaped</li>
<li>is sorted according to</li>
<li>can be moulded to created</li>
<li>are mixed -&gt; this mixture</li>
<li>collection -&gt; the collected glass</li>
<li>is melted -&gt; the resulting molten glass</li>
</ul>
</div>
<h3 id="comparison-diagram">Comparison diagram</h3>
<p>Comparison diagrams show:</p>
<ul>
<li>changes to something e.g. an old design compared to a new
design</li>
<li>or two alternative designs</li>
<li>or even two alternative locations on a map</li>
</ul>
<p>我们的任务是比较图表：</p>
<ul>
<li>Describe the changes</li>
<li>Describe things that don't change</li>
<li>Describe the differences</li>
<li>Describe the similarities</li>
</ul>
<p>需要注意时态。</p>
<h4 id="具体实例7">具体实例7</h4>
<figure>
<img data-src="https://raw.githubusercontent.com/ajumpbird/myPic/main/Snipaste_2024-07-17_18-15-20.png"
alt="Snipaste_2024-07-17_18-15-20" />
<figcaption aria-hidden="true">Snipaste_2024-07-17_18-15-20</figcaption>
</figure>
<p>这是一个关于now和future的问题。</p>
<p>（1）Introduction - paraphrase the question</p>
<ul>
<li>（原文）The diagrams below show the existing ground floor plan of a
house and a proposed plan for some building work.</li>
<li>The two pictures compare the current layout of the ground floor of a
house with a plan to redesign the same living space.</li>
</ul>
<p>（2）Overview - 2 sentences，2 main points</p>
<ul>
<li>We can see that the new design proposal involves making a number of
changes to the ground floor of the house, mainly in the central hall
area. There are no plans to change external walls or entrances.</li>
</ul>
<p>（3）Paragraph 3</p>
<ul>
<li>The most noticeable change from the existing to the proposed floor
plan is that there will no longer be a separate hall area when the
building work has been done. This will be achieved by removing the
internal wall and door between the hall and living room, along with the
current staircase and understair storage cupboard. With no separate hall
area, the proposed living room will also contain the staircase to the
first floor.</li>
</ul>
<p>（4）Paragraph 4</p>
<ul>
<li>To replace the current straight staircase, a new set of winding
stairs will be installed in the corner of the living room. The internal
door between the hall and kitchen will also be replaced with double
doors connecting the kitchen with the new living room. Finally, the
planned building work will also include the installation of some kitchen
furniture.</li>
</ul>
<div class="note success"><h4 id="good-expression7">Good expression7</h4>
<ul>
<li>existing plan -&gt; current layout</li>
<li>proposed plan -&gt; plan to redesign</li>
<li>design proposal, planned building work</li>
<li>there will no longer be</li>
<li>this will be achieved by removing</li>
<li>will also contain, will also include</li>
<li>will be installed, will be replaced</li>
<li>the design proposal involves</li>
<li>when the building work has been done</li>
<li>living space, central hall area, staircase</li>
<li>under-stair storage cupboard</li>
<li>a new set of winding stairs</li>
<li>the installation of some kitchen furniture</li>
</ul>
</div>
<h2 id="ielts-writing-task-2">IELTS writing task 2</h2>
<p>4个评分标准：</p>
<ol type="1">
<li>Task response</li>
<li>Coherence and cohesion</li>
<li>Vocabulary</li>
<li>Grammar</li>
</ol>
<p>将任务分成几个部分：</p>
<ol type="1">
<li>250 words</li>
<li>4 paragraphs</li>
<li>about 13 sentences(introduction 2, two main paragraphs 5 each,
conclusion 1)</li>
</ol>
<p>4种类型的问题：</p>
<ol type="1">
<li>Discussion</li>
<li>Opinion</li>
<li>Problem and solution</li>
<li>Two-part question</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>英语知识汇总</title>
    <url>/2024/07/07/%E8%8B%B1%E8%AF%AD%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>英语是一门重要的语言，为了能无障碍阅读英文文献、看英语视频和理解英语思维，我决定开始认真学习英语。
<span id="more"></span></p>
<h2 id="基本句型">基本句型</h2>
<p>句子成分包括：主语（subject）、谓语动词（predicate
verb）、宾语（object）、宾语补语（object complement）、主语补语（subject
complement）、定语（attribute）、状语（adverbial）、同位语（appositive）。</p>
<p>基本句型包括以下5类：</p>
<ol type="1">
<li><p>可以独立完成的动作</p>
<p>主语 + 不及物动词</p></li>
<li><p>有1个动作的承受者</p>
<p>主语 + 单及物动词 + 宾语</p></li>
<li><p>有2个动作承受者</p>
<p>主语 + 双及物动词 + 间接宾语 + 直接宾语</p></li>
<li><p>只有一个动作承受者（但需补充）</p>
<p>主语 + 复杂及物动词 + 间接宾语 + （宾语）补语</p></li>
<li><p>非“动作”</p>
<p>主语 + 系动词 + （主语）补语/表语</p></li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>言论</title>
    <url>/2024/07/09/%E8%A8%80%E8%AE%BA/</url>
    <content><![CDATA[<p>记录一些直击灵魂的言论。</p>
<span id="more"></span>
<blockquote><p>什么是三观不同： 你敬畏天理，他崇拜权威； 这是世界观不同。
你站在良知一边，他站在赢者一边； 这是价值观不同。
你努力是为了理想的生活，他努力是为了做人上人； 这是人生观的不同。</p>
<p>月亮是那崇高而不可企及的梦想； 六便士是为了生存不得不赚取的卑微收入。
多少人只是胆怯地抬头看一眼月亮， 又继续低头追逐赖以温饱的六便士？</p>
<footer><strong>毛姆</strong><cite>《月亮与六便士》</cite></footer></blockquote>
<p>带入到生活里，就是你喜欢吃小吃摊，他喜欢吃高档餐厅，这没什么关系，只是喜好不同，但是如果你觉得他吃高档餐厅是假清高，他觉得你吃小吃餐厅不卫生丢面子，这才是真正的三观不同。</p>
]]></content>
  </entry>
  <entry>
    <title>投资金句</title>
    <url>/2024/07/28/%E6%8A%95%E8%B5%84%E9%87%91%E5%8F%A5/</url>
    <content><![CDATA[<p>本文记录一些启迪人心的投资言论。贪婪和恐惧是人性的弱点，只有战胜人性的弱点，才会获得成功。
<span id="more"></span></p>
<p>投资者能否取得优异的投资成果，这取决于你在投资方面付出的努力和拥有的知识，也取决于在你的投资生涯中股市的愚蠢程度有多大。股市的行为约愚蠢，有条不紊的投资者成功的机会越大。遵从格雷厄姆的建议，你就能从股市的愚蠢行为中获利，而不会成为愚蠢行为的参与者。</p>
]]></content>
  </entry>
  <entry>
    <title>为两个GitHub账号设置ssh</title>
    <url>/2024/08/31/%E4%B8%BA%E4%B8%A4%E4%B8%AAGitHub%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AEssh/</url>
    <content><![CDATA[<p>本文由chatgpt生成。 <span id="more"></span>
要为两个GitHub账号设置SSH密钥，你需要为每个账号生成并使用不同的SSH密钥对。以下是详细的步骤：</p>
<h3 id="生成第一个账号的ssh密钥对">1. 生成第一个账号的SSH密钥对</h3>
<ol type="1">
<li><p>打开终端（Terminal）。</p></li>
<li><p>使用以下命令生成第一个SSH密钥对：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>your_email@example.com</code>替换为第一个GitHub账号的邮箱地址。</p></li>
<li><p>在提示时，保存密钥文件（例如：<code>~/.ssh/id_rsa_github1</code>）。你也可以按Enter键使用默认位置。</p></li>
<li><p>输入并确认密码短语（如果需要）。</p></li>
</ol>
<h3 id="生成第二个账号的ssh密钥对">2. 生成第二个账号的SSH密钥对</h3>
<ol type="1">
<li><p>使用以下命令生成第二个SSH密钥对：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_other_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>your_other_email@example.com</code>替换为第二个GitHub账号的邮箱地址。</p></li>
<li><p>在提示时，保存密钥文件为另一个文件名（例如：<code>~/.ssh/id_rsa_github2</code>）。</p></li>
<li><p>输入并确认密码短语（如果需要）。</p></li>
</ol>
<h3 id="添加ssh密钥到ssh-agent">3. 添加SSH密钥到ssh-agent</h3>
<ol type="1">
<li><p>启动<code>ssh-agent</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加第一个SSH密钥到<code>ssh-agent</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github1</span><br></pre></td></tr></table></figure></li>
<li><p>添加第二个SSH密钥到<code>ssh-agent</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github2</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="配置.sshconfig文件">4. 配置<code>~/.ssh/config</code>文件</h3>
<p>编辑<code>~/.ssh/config</code>文件（如果文件不存在，可以创建一个），添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Default GitHub account</span></span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_github1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Second GitHub account</span></span><br><span class="line">Host github-second</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa_github2</span><br></pre></td></tr></table></figure>
<p>在这个配置中：</p>
<ul>
<li><code>github.com</code>使用的是第一个GitHub账号。</li>
<li><code>github-second</code>是为第二个GitHub账号指定的主机名。</li>
</ul>
<h3 id="将ssh公钥添加到github账号">5. 将SSH公钥添加到GitHub账号</h3>
<ol type="1">
<li><p>复制第一个账号的SSH公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa_github1.pub</span><br></pre></td></tr></table></figure>
<p>然后将输出的内容复制到第一个GitHub账号的SSH密钥设置中。</p></li>
<li><p>复制第二个账号的SSH公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa_github2.pub</span><br></pre></td></tr></table></figure>
<p>然后将输出的内容复制到第二个GitHub账号的SSH密钥设置中。</p></li>
</ol>
<h3 id="使用ssh克隆仓库">6. 使用SSH克隆仓库</h3>
<ul>
<li><p>对于第一个GitHub账号，可以直接使用标准的GitHub地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/repository.git</span><br></pre></td></tr></table></figure></li>
<li><p>对于第二个GitHub账号，使用在<code>~/.ssh/config</code>中配置的<code>Host</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github-second:username/repository.git</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过这些步骤，你可以在同一台机器上为两个GitHub账号设置并使用SSH。</p>
]]></content>
  </entry>
</search>
